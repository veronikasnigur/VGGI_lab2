// Vertex shader
const vertexShaderSource = `
precision mediump float;

attribute vec3 vertex;          
attribute vec3 normal;          
uniform mat4 ModelViewProjectionMatrix;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 ambientColor;
uniform vec3 cameraPos;

varying vec3 fragColor;
varying vec3 fragNormal;
varying vec3 fragPosition;

void main() {
    fragNormal = normalize(normal);
    fragPosition = vec3(ModelViewProjectionMatrix * vec4(vertex, 1.0));

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);

    vec3 lightDir = normalize(lightPos - fragPosition);
    float diff = max(dot(fragNormal, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    vec3 ambient = ambientColor;

    fragColor = ambient + diffuse;
}

`;


// Fragment shader
const fragmentShaderSource = `
precision mediump float;

varying vec3 fragColor;
varying vec3 fragNormal;
varying vec3 fragPosition;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 ambientColor;
uniform vec3 cameraPos;

void main() {
    vec3 normal = normalize(fragNormal);
    vec3 lightDir = normalize(lightPos - fragPosition);
    vec3 viewDir = normalize(cameraPos - fragPosition);

    float diffuse = max(dot(normal, lightDir), 0.0);
    vec3 diffuseColor = lightColor * diffuse;

    vec3 ambient = ambientColor * 0.2;

    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);
    vec3 specularColor = lightColor * spec;

    vec3 color = pow(ambient + diffuseColor + specularColor, vec3(1.0 / 2.2));
    gl_FragColor = vec4(color, 1.0);
}



`;

